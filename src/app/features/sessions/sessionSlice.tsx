import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../store";

export interface User {
  id?: string,
  email?: string,
  username?: string,
  description?: string,
  tools?: string,
  createdAt?: string
}

export interface AuthState {
  currentUser?: User;
  loading: boolean;
  error: boolean;
  errorMessages?: string[];
  accessToken?: string;
  refreshToken?: string | null;
  expiresIn?: number;
  tokenType?: string;
}

export interface UserLoginData {
  email: string;
  password: string;
}

const initialState: AuthState = {
  currentUser: {
    id: undefined,
    email: undefined,
    username: undefined,
    description: undefined,
    tools: undefined,
    createdAt: undefined
  },
  loading: true,
  error: false,
  errorMessages: [],
  accessToken: undefined,
  refreshToken: getRefreshToken(),
  expiresIn: undefined,
  tokenType: undefined
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const signUpUser = createAsyncThunk(
  "session/signUpUser",
  async (payload: UserLoginDate, { rejectWithValue }) => {
    const response = await createUserWithEmailAndPassword(
      payload.email,
      payload.password
      );
      if (response.errors) {
        return rejectWithValue(response.errors);
      }
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const sessionSlice = createSlice({
  name: "session",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signUpUser.pending, (state) => {
        state.loading = true;
        state.error = false;
        state.errorMessages = [];
      })
      .addCase(signUpUser.fulfilled, (state, action: any) => {
        state.status = "idle";
        state.value += action.payload;
      })
      .addCase(signUpUser.rejected, (state, action: any) => {
        state.loading = false;
        state.error = true;
        state.errorMessages = action.payload.errors;
      });
  },
});

// export const {  } = sessionSlice.actions;
function setRefreshToken(token: string) {
  localStorage.setItem("refreshToken", token);
}

function getRefreshToken() {
  return localStorage.getItem("refreshToken");
}
function removeRefreshToken() {
  localStorage.removeItem("refreshToken");
}

export default sessionSlice.reducer;
